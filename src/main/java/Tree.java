import org.jgrapht.alg.DijkstraShortestPath;import org.jgrapht.graph.*;import org.slf4j.*;import java.util.*;public class Tree {  Logger logger = LoggerFactory.getLogger(Tree.class);  SimpleDirectedWeightedGraph<String, DefaultWeightedEdge> graph =      new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>          (DefaultWeightedEdge.class);  public void treeInitialization(int numUsers) {    Map<Integer, Integer> map = new HashMap<Integer, Integer>();    for (int counter = 0; counter < numUsers; counter++) {             //magic num 10 (start num of edges)      Random rdn = new Random();      map.put(counter, rdn.nextInt(85));    }    for (int counter = 0; counter < numUsers; counter++) {      graph.addVertex(String.valueOf(counter));      logger.info("Vertex - " + counter + " added!");    }    logger.info("Pings - " + map.values());    for (int counter = 0; counter < numUsers - 1; counter++) {      DefaultWeightedEdge e1 = graph.addEdge("0", String.valueOf(counter + 1));      graph.setEdgeWeight(e1, map.get(counter));    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(graph, "0", "4");    System.out.println(shortest_path);  }}