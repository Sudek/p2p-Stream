import org.jgrapht.alg.DijkstraShortestPath;import org.jgrapht.graph.*;import org.slf4j.*;import java.util.*;public class Tree {  Logger logger = LoggerFactory.getLogger(Tree.class);  public void treeInitialization(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> defaultGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    ArrayList<Integer> list = new ArrayList<Integer>();    for (int counter = 0; counter < numUsers; counter++) {      Random rdn = new Random();      list.add(counter, rdn.nextInt(85));      defaultGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added! Ping - " + list.get(counter));    }    for (int counter = 0; counter < numUsers - 1; counter++) {      DefaultWeightedEdge e1 = defaultGraph.addEdge(0, (counter + 1));      defaultGraph.setEdgeWeight(e1, list.get(counter));    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(defaultGraph, 0, 4);    System.out.println(shortest_path);  }}