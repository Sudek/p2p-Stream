import org.jgrapht.alg.DijkstraShortestPath;import org.jgrapht.graph.*;import org.slf4j.*;import java.util.*;public class Tree {  Logger logger = LoggerFactory.getLogger(Tree.class);  public void treeInitialization(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> defaultGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    Map<Integer, Integer> map = new HashMap<Integer, Integer>();    for (int counter = 0; counter < numUsers; counter++) {      Random rdn = new Random();      map.put(counter, rdn.nextInt(85));      defaultGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added!");    }    logger.info("Pings - " + map.values());    for (int counter = 0; counter < numUsers - 1; counter++) {      DefaultWeightedEdge e1 = defaultGraph.addEdge(0, (counter + 1));      defaultGraph.setEdgeWeight(e1, map.get(counter));    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(defaultGraph, 0, 4);    System.out.println(shortest_path);  }  public void treeTrain(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> trainGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    Map<Integer, Integer> map = new HashMap<Integer, Integer>();    Random rdn = new Random();    for (int counter = 0; counter < numUsers; counter++) {      map.put(counter, rdn.nextInt(85));      trainGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added!");    }    logger.info("Pings - " + map.values());    Map<Integer, Integer> sortedMap = sortByComparator(map);    logger.info("Pings - " + sortedMap.values());    for (int counter = 1; counter < numUsers; counter++) {      if (counter % 2 != 0) {        DefaultWeightedEdge e1 = trainGraph.addEdge(0, counter);        trainGraph.setEdgeWeight(e1, map.get(counter));      } if (counter % 2 == 0) {        DefaultWeightedEdge e2 = trainGraph.addEdge(counter - 1, counter);        trainGraph.setEdgeWeight(e2, map.get(counter));      }    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(trainGraph, 0, 4);    System.out.println(shortest_path);  }  private static Map<Integer, Integer> sortByComparator(Map<Integer, Integer> unsortMap) {    // Convert Map to List    List<Map.Entry<Integer, Integer>> list =        new LinkedList<Map.Entry<Integer, Integer>>(unsortMap.entrySet());    // Sort list with comparator, to compare the Map values    Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {      public int compare(Map.Entry<Integer, Integer> o1,          Map.Entry<Integer, Integer> o2) {        return (o1.getValue()).compareTo(o2.getValue());      }    });    // Convert sorted map back to a Map    Map<Integer, Integer> sortedMap = new LinkedHashMap<Integer, Integer>();    for (Iterator<Map.Entry<Integer, Integer>> it = list.iterator(); it.hasNext();) {      Map.Entry<Integer, Integer> entry = it.next();      sortedMap.put(entry.getKey(), entry.getValue());    }    return sortedMap;  }  public void starTree(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> starGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    Map<Integer, Integer> map = new HashMap<Integer, Integer>();    Random rdn = new Random();    for (int counter = 0; counter < numUsers; counter++) {      map.put(counter, rdn.nextInt(85));      starGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added!");    }    logger.info("Pings - " + map.values());        Map<Integer, Integer> sortedMap = sortByComparator(map);        logger.info("Pings - " + sortedMap.values());    for (int counter = 0; counter < numUsers - 1; counter++) {      DefaultWeightedEdge e1 = starGraph.addEdge(counter, counter + 1);      starGraph.setEdgeWeight(e1, sortedMap.get(counter));    }    for (int counter = 0; counter < numUsers/2; counter++) {      DefaultWeightedEdge e1 = starGraph.addEdge(0, counter + 2);      starGraph.setEdgeWeight(e1, sortedMap.get(counter));    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(starGraph, 0, 8);    System.out.println(shortest_path);  }}