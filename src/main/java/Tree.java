import org.jgrapht.alg.DijkstraShortestPath;import org.jgrapht.graph.*;import org.slf4j.*;import java.util.*;public class Tree {  Logger logger = LoggerFactory.getLogger(Tree.class);  public void treeInitialization(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> defaultGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    ArrayList<Integer> list = new ArrayList<Integer>();    for (int counter = 0; counter < numUsers; counter++) {      Random rdn = new Random();      list.add(counter, rdn.nextInt(85));      defaultGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added! Ping - " + list.get(counter));    }    for (int counter = 0; counter < numUsers - 1; counter++) {      DefaultWeightedEdge e1 = defaultGraph.addEdge(0, (counter + 1));      defaultGraph.setEdgeWeight(e1, list.get(counter));    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(defaultGraph, 0, 4);    System.out.println(shortest_path);  }  public void treeTrain(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> trainGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    ArrayList<Integer> list = new ArrayList<Integer>();    for (int counter = 0; counter < numUsers; counter++) {      Random rdn = new Random();      list.add(counter, rdn.nextInt(85));      trainGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added! Ping - " + list.get(counter));    }    for (int counter = 1; counter < numUsers; counter++) {      if (counter % 2 != 0) {        DefaultWeightedEdge e1 = trainGraph.addEdge(0, counter);        trainGraph.setEdgeWeight(e1, list.get(counter));      } if (counter % 2 == 0) {        DefaultWeightedEdge e2 = trainGraph.addEdge(counter - 1, counter);        trainGraph.setEdgeWeight(e2, list.get(counter));      }    }    logger.info("Shortest path from 0 to 4 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(trainGraph, 0, 4);    System.out.println(shortest_path);  }  public void starTree(int numUsers) {    SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge> starGraph =        new SimpleDirectedWeightedGraph<Integer, DefaultWeightedEdge>            (DefaultWeightedEdge.class);    ArrayList<Integer> list = new ArrayList<Integer>();    for (int counter = 0; counter < numUsers; counter++) {      Random rdn = new Random();      list.add(counter, rdn.nextInt(99));      starGraph.addVertex(counter);      logger.info("Vertex - " + counter + " added! Ping - " + list.get(counter));    }    for (int counter = 0; counter < numUsers - 1; counter++) {      DefaultWeightedEdge e1 = starGraph.addEdge(counter, counter + 1);      starGraph.setEdgeWeight(e1, list.get(counter));      if(counter == numUsers - 2) {        DefaultWeightedEdge lastEdge = starGraph.addEdge(counter + 1, 1);        starGraph.setEdgeWeight(lastEdge, list.get(counter + 1));      }    }    for (int counter = 0; counter < numUsers/2; counter++) {      DefaultWeightedEdge e1 = starGraph.addEdge(0, counter + 2);      starGraph.setEdgeWeight(e1, list.get(counter));    }    logger.info("Shortest path from 0 to 5 and check what graph build right");    List shortest_path = DijkstraShortestPath.findPathBetween(starGraph, 0, 5);    System.out.println(shortest_path);    for(DefaultWeightedEdge e : starGraph.edgeSet()){      System.out.println(starGraph.getEdgeSource(e) + " --> " + starGraph.getEdgeTarget(e));    }  }}